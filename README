- Metodos:

public int suma(int a, int b){

}
public: modo de acceso
int: valor de retorno.
(int a, int b): argumentoss

Metodo constructor:
miauto = new Auto() --> metodo construct
metodo constructor: crea nuevas instancias de una clase.
Si no lo ves en la clase, esta oculto xq ses provisto por java

- Todos los metodos en la clase main.java deben ser estaticos
** Por que? vaeriguar

** 37 getters and setters
Variables primitivas estan en minusculas, duran poco tiempo en memoria
java desde la version 1 o de la jdk 1 introdujo la clase string para ingresar cadenas envez de hacerlo en arrasys
Variables objeto primitivo empiezan en mayuscula
memoria stack
memoria heap

tipo obejto primitivo se almacenan en el stack
tipo de dato objeto primitivo se almacena en el heap por que tienen el tiempo de vida mas largo

* Toda las clases que cree en java ,estara explicitamente heredando dela clase OBJECT, por eso cuando ponemos
this. o super, vemos metodos que son de la clase object, por ejemplo el metodo tostring,

* short cut coment:
gotto: File > Settings > Keymap > Main Menu > Code > Comment , clic Edit

* El caso de sobrescribir, cuando cambio el comportamiento de un metodo que ya tiene un comportamiento, se le llama POLIMORFISMO
* El polimorfismo nos permite el mismo metodo con diferente comportamiento.
En esta clase continuamos aplicando herencia a la entidad Chapter, que viene de Movie.

Todas las entidades están heredando de la clase Object, que tiene métodos definidos. Con la anotación @Override podemos sobreescribir un método de la clase padre, en este caso Object. Esto lo vamos a utilizar para obtener el título, género, año, creador y duración de la película. Cada vez que imprimas el objeto Movie el programa va a arrojar toda la información de la película.
Sobreescritura: Cuando una clase hereda de otra, y en esta clase hija se redefine un método con una implementación distinta a la de la clase padre.
Polimorfismo: Posibilidad de construir varios métodos con el mismo nombre, pero con relación a la clase a la que pertenece cada uno, con comportamientos diferentes.


** 33, 34 Interfaces
Las interfaces son parecidas a las herencias, con la diferencia que se puede aplicar a muchas entidades.
en las interfaces no se implementa nada, solo van las firmas











